{"version":3,"file":"js/index.cfa6eb6f70264ff2abc8.js","mappings":"AAAAA,OAAOC,sBAAwB,SAAUC,GACrC,MAAMC,EAAKC,SAASC,eAAeH,GAC7BI,EAASH,EAAGI,aAAa,UAC/B,GAAID,GAAqB,SAAXA,EACVH,EAAGK,MAAM,cAAgB,IACzBL,EAAGM,aAAa,SAAU,aACvB,CACH,MAAMC,EAAMP,EAAGQ,cAAc,OAC7BR,EAAGK,MAAM,cAAgBE,EAAIE,wBAAwBC,OAAS,KAC9DV,EAAGM,aAAa,SAAU,UAIlC,IAAIK,IAAI,CACJX,GAAI,WACJY,KAAM,WACF,MAAO,CACHC,aAAc,OACdC,MAAOb,SAASc,KAAKC,YACrBN,OAAQT,SAASc,KAAKC,YAAc,EAAI,MAGhDC,UACIpB,OAAOqB,SAAW,KACdC,KAAKC,qBAETD,KAAKC,qBAETC,UACIF,KAAKG,IAAIjB,MAAMkB,WAAa,WAEhCC,QAAS,CACLJ,oBACIvB,OAAOmB,YAAcf,SAASc,KAAKC,YACnCG,KAAKL,MAAQjB,OAAOmB,YAUpBG,KAAKT,OAASS,KAAKL,MAAQ,EAAI,OAY3CW,GAAE,WAMEA,EAAE,0BAA0BC,UAM5BD,EAAE,gBAAgBE,GAAG,SAAS,SAAUC,GACpC,IAAIC,EAASJ,EAAEN,MACfM,EAAE,cAAcK,OAAOC,QAAQ,CAC3BC,UAAWP,EAAEI,EAAOI,KAAK,SAASC,SAASC,IAAM,IAClD,KACHP,EAAEQ,oBAQNX,EAAE,QAAQY,UAAU,CAChBC,OAAQ,0BACRJ,OAAQ,KAiBhB,WAEI,IACIK,EAAY,CAAC,OAAS,YAG1B,GAAId,EAAE,QAAae,OAAS,EAAG,CAE3B,IAAIC,EAAOC,EAAED,KAAK,CACdE,QAAS,iBACTC,SAAU,CAAC,GAAI,IACfC,YAAa,CAAC,GAAI,IAClBC,cAAe,CAAC,EAAG,MAGnBC,GAAW,EACXC,GAAM,EAENvB,EAAE5B,QAAQiB,QAAU,MACpBiC,GAAW,EACXC,GAAM,GAGV,IAAIC,EAAMP,EAAEO,IArBJ,MAqBe,CACnBC,OAAQX,EACRY,KAAM,GACNJ,SAAUA,EACVC,IAAKA,EACLI,iBAAiB,IAGrBV,EAAEW,UAAU,oDAAqD,CAC7DC,YAAa,uFACdC,MAAMN,GAETA,EAAIO,KAAK,SAAS,WACdP,EAAIG,gBAAgBK,YAIPf,EAAEgB,OAAOnB,EAAW,CAC7BE,KAAMA,IACPc,MAAMN,GAEFU,UAAU,8EAA+E,CAC5FC,SAAU,IACVC,SAAU,IACVC,UAAW,sBAzDvBb,GAiEJ,WAiCI,MAAMc,EAlBN,WACI,MAAMC,EAAS/D,SAASgE,uBAAuB,iBACzCC,EAAMF,EAAOxB,OACnB,IAAI2B,EAAI,EACR,OAAO,WAGH,IAAK,IAAIC,EAAID,EAAGC,EAAIF,EAAKE,IAEqB,oBAAlCJ,EAAOI,GAAGhE,aAAa,SACvB4D,EAAOI,GAAGC,IAAML,EAAOI,GAAGhE,aAAa,aAE3C+D,GAAQ,GAMLG,GACnBP,IACAlE,OAAO0E,iBAAiB,SAlCxB,SAAkBC,EAAMC,EAAOC,GAC3B,IAAIC,EAAU,KAAMC,EAAY,IAAIC,KACpC,OAAO,WACH,MAAMC,EAAU,IAAID,KACpBE,aAAaJ,GACTG,EAAUF,GAAaF,GACvBF,IACAI,EAAYE,GAEZH,EAAUK,WAAWR,EAAMC,IAyBLQ,CAASlB,EAAY,IAAK,MAAO,GA9FnEmB","sources":["webpack://dbg-homepage/./src/pages/index/entry.js"],"sourcesContent":["window.toggleAbstractDisplay = function (id) {\r\n    const el = document.getElementById(id);\r\n    const unfold = el.getAttribute('unfold');\r\n    if (unfold && unfold === 'true') {\r\n        el.style['max-height'] = '0';\r\n        el.setAttribute('unfold', 'false');\r\n    } else {\r\n        const div = el.querySelector('div');\r\n        el.style['max-height'] = div.getBoundingClientRect().height + 'px';\r\n        el.setAttribute('unfold', 'true');\r\n    }\r\n}\r\n\r\nnew Vue({\r\n    el: '#top-img',\r\n    data: function () {\r\n        return {\r\n            carouselType: 'card',\r\n            width: document.body.clientWidth,\r\n            height: document.body.clientWidth / 2 * 0.67,\r\n        }\r\n    },\r\n    created() {\r\n        window.onresize = () => {\r\n            this.clientSizeChanged()\r\n        };\r\n        this.clientSizeChanged();\r\n    },\r\n    mounted() {\r\n        this.$el.style.visibility = 'visible'\r\n    },\r\n    methods: {\r\n        clientSizeChanged() {\r\n            window.clientWidth = document.body.clientWidth\r\n            this.width = window.clientWidth\r\n            //\r\n            // if (this.width >= 768) {\r\n            //     this.carouselType = 'card'\r\n            //     this.height = this.getVisibleHeight()  + 'px'\r\n            // } else {\r\n            //     this.carouselType = ''\r\n            //     this.height = (this.width * 0.75) + 'px'\r\n            // }\r\n\r\n            this.height = this.width / 2 * 0.8\r\n\r\n            // console.log(this.width, this.height)\r\n        },\r\n        // getVisibleHeight() {\r\n        //     console.log(document, this)\r\n        //     const header = document.getElementById(\"header\");\r\n        //     return window.innerHeight - header.clientHeight;\r\n        // }\r\n    },\r\n})\r\n\r\n$(function () {\r\n\r\n    /* =========================================\r\n     * tooltip\r\n     *  =======================================*/\r\n\r\n    $('.collaborator-logo img').tooltip();\r\n\r\n    /* =================================================\r\n     * Preventing URL update on navigation link click\r\n     *  ==============================================*/\r\n\r\n    $('.link-scroll').on('click', function (e) {\r\n        var anchor = $(this);\r\n        $('html, body').stop().animate({\r\n            scrollTop: $(anchor.attr('href')).offset().top - 50\r\n        }, 1000);\r\n        e.preventDefault();\r\n    });\r\n\r\n\r\n    /* =========================================\r\n     *  Scroll Spy\r\n     *  =======================================*/\r\n\r\n    $('body').scrollspy({\r\n        target: '#navbarSupportedContent',\r\n        offset: 80\r\n    });\r\n\r\n\r\n    /* =========================================\r\n     *  Map\r\n     *  =======================================*/\r\n    map();\r\n\r\n\r\n    /* =========================================\r\n     *  Member img lazy load\r\n     *  =======================================*/\r\n    imgLazyLoad();\r\n});\r\n\r\n\r\nfunction map() {\r\n\r\n    var mapId = 'map',\r\n        mapCenter = [22.6040, 113.995399],\r\n        mapMarker = true;\r\n\r\n    if ($('#' + mapId).length > 0) {\r\n\r\n        var icon = L.icon({\r\n            iconUrl: 'img/marker.svg',\r\n            iconSize: [50, 50],\r\n            popupAnchor: [0, -18],\r\n            tooltipAnchor: [0, 19]\r\n        });\r\n\r\n        var dragging = false,\r\n            tap = false;\r\n\r\n        if ($(window).width() > 700) {\r\n            dragging = true;\r\n            tap = true;\r\n        }\r\n\r\n        var map = L.map(mapId, {\r\n            center: mapCenter,\r\n            zoom: 14,\r\n            dragging: dragging,\r\n            tap: tap,\r\n            scrollWheelZoom: false\r\n        });\r\n\r\n        L.tileLayer('https://{s}.tile.openstreetmap.de/{z}/{x}/{y}.png', {\r\n            attribution: 'Â© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(map);\r\n\r\n        map.once('focus', function () {\r\n            map.scrollWheelZoom.enable();\r\n        });\r\n\r\n        if (mapMarker) {\r\n            var marker = L.marker(mapCenter, {\r\n                icon: icon\r\n            }).addTo(map);\r\n\r\n            marker.bindPopup(\"<div class='p-1'><p>Southern University of Science and Technology</p></div>\", {\r\n                minwidth: 200,\r\n                maxWidth: 300,\r\n                className: 'map-custom-popup'\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction imgLazyLoad() {\r\n    function throttle(func, delay, atLeast) {\r\n        let timeout = null, startTime = new Date()\r\n        return function () {\r\n            const curTime = new Date()\r\n            clearTimeout(timeout);\r\n            if (curTime - startTime >= atLeast) {\r\n                func()\r\n                startTime = curTime\r\n            } else {\r\n                timeout = setTimeout(func, delay)\r\n            }\r\n        }\r\n    }\r\n\r\n    function lazyLoad() {\r\n        const images = document.getElementsByClassName('lazy-load-img')\r\n        const len = images.length\r\n        let n = 0;\r\n        return function () {\r\n            // const seeHeight = document.documentElement.clientHeight;\r\n            // const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\r\n            for (let i = n; i < len; i++) {\r\n                // if (images[i].getBoundingClientRect().y < seeHeight + scrollTop) {\r\n                    if (images[i].getAttribute('src') === 'img/loading.gif') {\r\n                        images[i].src = images[i].getAttribute('data-src')\r\n                    }\r\n                    n = n + 1\r\n                // }\r\n            }\r\n        }\r\n    }\r\n\r\n    const loadImages = lazyLoad();\r\n    loadImages();\r\n    window.addEventListener('scroll', throttle(loadImages, 500, 1000), false);\r\n}\r\n\r\n"],"names":["window","toggleAbstractDisplay","id","el","document","getElementById","unfold","getAttribute","style","setAttribute","div","querySelector","getBoundingClientRect","height","Vue","data","carouselType","width","body","clientWidth","created","onresize","this","clientSizeChanged","mounted","$el","visibility","methods","$","tooltip","on","e","anchor","stop","animate","scrollTop","attr","offset","top","preventDefault","scrollspy","target","mapCenter","length","icon","L","iconUrl","iconSize","popupAnchor","tooltipAnchor","dragging","tap","map","center","zoom","scrollWheelZoom","tileLayer","attribution","addTo","once","enable","marker","bindPopup","minwidth","maxWidth","className","loadImages","images","getElementsByClassName","len","n","i","src","lazyLoad","addEventListener","func","delay","atLeast","timeout","startTime","Date","curTime","clearTimeout","setTimeout","throttle","imgLazyLoad"],"sourceRoot":""}